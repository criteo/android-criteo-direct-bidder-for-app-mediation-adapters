apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "$adapter_version"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    // TODO EE-916 Publish SNAPSHOT release of the SDK and use them as a dependency instead of
    //  relying on dynamic version.
    releaseImplementation("com.criteo.publisher:criteo-publisher-sdk:$sdk_version+")
    debugImplementation("com.criteo.publisher:criteo-publisher-sdk-debug:$sdk_version+")

    compileOnly("androidx.annotation:annotation:1.0.0")

    // TODO EE-925 Update this dependency to check that the adapter is still working.
    compileOnly("com.google.android.gms:play-services-ads:15.0.0") {
        exclude(group: "com.android.support")
    }

    implementation("androidx.multidex:multidex:2.0.1")

    testImplementation("junit:junit:4.12")
    testImplementation("com.criteo.publisher:criteo-publisher-sdk-test-utils:$sdk_version+") {
        exclude(group: "com.android.support")
    }

    androidTestImplementation("androidx.test:runner:1.2.0")
    androidTestImplementation("androidx.test:core:1.0.0")
    androidTestImplementation("androidx.legacy:legacy-support-core-utils:1.0.0")
    androidTestImplementation("org.mockito:mockito-android:3.3.0")
    androidTestImplementation("com.criteo.publisher:criteo-publisher-sdk-test-utils:$sdk_version+") {
        exclude(group: "com.android.support")
    }
    androidTestImplementation("com.google.android.gms:play-services-ads:15.0.0") {
        exclude(group: "com.android.support")
    }
}

def azureLocalRepository = "${buildDir}/azure-${adapter_publication_version}"

publishing {
    publications {
        release(MavenPublication) {
            groupId = "com.criteo.mediation.google"
            artifactId = "criteo-adapter"
            version adapter_publication_version

            artifact("$buildDir/outputs/aar/mediation-release.aar") {
                afterEvaluate {
                    builtBy(tasks["bundleReleaseAar"])
                }
            }

            pom {
                packaging = "aar"

                withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")

                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", "com.criteo.publisher")
                    dependencyNode.appendNode("artifactId", "criteo-publisher-sdk")
                    dependencyNode.appendNode("version", "$sdk_version")
                    dependencyNode.appendNode("type", "aar")
                }
            }
        }
    }

    with nexusPreProdRepository
    with nexusProdRepository
    with devRepository

    repositories {
        maven {
            // TODO EE-915 Find a way to make the upload from Gradle rather than relying on bash script
            name = "azure"
            url = "file://${azureLocalRepository}"
        }
    }
}

task uploadToAzure {
    doLast {
        exec {
            commandLine "bash", "../scripts/publish-to-azure.sh", "${azureLocalRepository}"
        }
    }
}

tasks.withType(PublishToMavenRepository).all {
    if (name.contains("Azure")) {
        it.finalizedBy uploadToAzure
    }
}
